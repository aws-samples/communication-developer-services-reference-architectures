AWSTemplateFormatVersion: 2010-09-09
Description: SES event database

Parameters:
  EventAthenaDatabaseName:
    Type: String
    Description: The name of the SES Event Database all lower case.
  CreateBucketName:
    Type: String
    Description: Type a globally unique Amazon S3 bucket name that will be used for the SES events' storage.
  NewConfigurationSet:
    Type: String
    Description: Select "Yes" if you would like a new one to be created. 
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No' 
  ConfigurationSetName:
    Type: String
    Description: The name of the SES configuration set name that exists or will be created. If you are tryping the name of an existing configuration set, make sure it's exactly the same.    

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Database parameters"  
        Parameters:
          - EventAthenaDatabaseName
          - CreateBucketName
      -
        Label:
          default: "SES configuration set"
        Parameters:
          - NewConfigurationSet
          - ConfigurationSetName

Conditions:
  NewConfigSet: !Equals [!Ref NewConfigurationSet, 'Yes']

Resources:

#### SES CONFIGURATION SET
##################################

  SESConfigSet:
    Type: AWS::SES::ConfigurationSet
    Condition: NewConfigSet
    Properties:
      Name: !Ref ConfigurationSetName

#### GLUE & ATHENA
##################################

  SESEventDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref EventAthenaDatabaseName
        Description: "Amazon SES Event Database"

  EventTableAllNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref SESEventDatabase
      Description: "Create a Table for all SES events"
      QueryString:
        !Sub
          |
            CREATE EXTERNAL TABLE IF NOT EXISTS `ses_events` (
              eventType string,
              mail struct<
                timestamp: string,
                source: string,
                sourceArn: string,
                sendingAccountId: string,
                messageId: string,
                destination: array<string>,
                headersTruncated: boolean,
                headers: array<struct<name: string, value: string>>,
                commonHeaders: struct<`from`: array<string>, `to`: array<string>, messageId: string, subject: string>,
                tags: struct<
                  ses_configuration_set: array<string>,
                  ses_source_ip: array<string>,
                  ses_from_domain: array<string>,
                  ses_caller_identity: array<string>,
                  campaign: array<string>
                >
              >,
              send map<string,string>,
              delivery struct<
                timestamp: string,
                processingTimeMillis: bigint,
                recipients: array<string>,
                smtpResponse: string,
                reportingMTA: string
              >,
              open struct<
                ipAddress: string,
                timestamp: string,
                userAgent: string
              >,
              click struct<
                ipAddress: string,
                link: string,
                linkTags: map<string,array<string>>,
                timestamp: string,
                userAgent: string
              >,
              bounce struct<
                bounceType: string,
                bounceSubType: string,
                bouncedRecipients: array<struct<
                  emailAddress: string,
                  action: string,
                  status: string,
                  diagnosticCode: string
                >>,
                timestamp: string,
                feedbackId: string,
                reportingMTA: string
              >,
              complaint struct<
                complainedRecipients: array<struct<
                  emailAddress: string
                >>,
                timestamp: string,
                feedbackId: string,
                userAgent: string,
                complaintFeedbackType: string,
                arrivalDate: string
              >,
              reject struct<
                  reason: string
              >,
              failure struct<
                errorMessage: string,
                templateName: string
              >
            )
            PARTITIONED BY (ingest_timestamp timestamp)
            STORED AS parquet
            LOCATION "s3://${CreateBucketName}/ses-events" 
            TBLPROPERTIES ("parquet.compression"="SNAPPY")

  EmailStatusNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref SESEventDatabase
      Description: "Create the Email Status View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_status AS
            SELECT
                mail.messageid as message_id,
                mail.commonHeaders.subject as subject,
                mail.commonHeaders.to as destination,
                min(mail.timestamp) as time_sent,
                min(delivery.timestamp) as time_delivered,
                min(open.timestamp) as time_opened,
                min(click.timestamp) as time_clicked,
                min(bounce.timestamp) as time_bounced,
                arbitrary(bounce.bounceType) as bounce_type,
                arbitrary(bounce.bounceSubType) as bounce_subtype,
                min(complaint.timestamp) as time_complained,
                arbitrary(complaint.complaintFeedbackType) as complaint_feedbacktype
            FROM
              ses_events
            GROUP BY mail.messageid, mail.commonHeaders.subject, mail.commonHeaders.to

#### CUSTOM RESOURCE LAMBDA - CREATE CONFIGURATION SET
##################################

  CreateConfigurationSet:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt ConfSetCustomResource.Arn
      CustomResourceAction: CreateConfigurationSet

  ConfSetCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt ConfSetCustomResourceRole.Arn
      Runtime: python3.12
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          CONFIG_SET: !Ref ConfigurationSetName
          FIREHOSE_ARN: !GetAtt SESEventFirehose.Arn
          IAM_FIREHOSE_ARN: !GetAtt SESFirehoseRole.Arn
      Code:
       ZipFile: |
        import cfnresponse
        import os
        import logging
        import traceback
        import boto3
        import json
        import time
        sesv2 = boto3.client('sesv2')

        def set_ses_event_destination(snames):
            try:
                for sn in snames:
                    if sn == '':
                        break
                    response = sesv2.create_configuration_set_event_destination(
                        ConfigurationSetName=sn,
                        EventDestinationName='event-database',
                        EventDestination={
                          'Enabled': True,
                          'MatchingEventTypes': [
                              'SEND','REJECT','BOUNCE','COMPLAINT','DELIVERY','OPEN','CLICK','RENDERING_FAILURE',
                          ],
                          'KinesisFirehoseDestination': {
                            'IamRoleArn': os.environ.get('IAM_FIREHOSE_ARN'),
                            'DeliveryStreamArn': os.environ.get('FIREHOSE_ARN')
                          }
                        }
                    )
                    logging.debug('SN Response for: %s' % (sn), response)
            except Exception as error:
                logging.error('set_ses_event_destination error: %s' % (error))
                logging.error('set_ses_destination trace: %s' % traceback.format_exc())
                raise

        def lambda_handler(event, context):
            log_level = str(os.environ.get('LOG_LEVEL')).upper()
            if log_level not in [
                              'DEBUG', 'INFO',
                              'WARNING', 'ERROR',
                              'CRITICAL'
                          ]:
              log_level = 'DEBUG'
            logging.getLogger().setLevel(log_level)
            logging.debug(event)

            if event['RequestType'] == 'Create':
              try:
                  set_ses_event_destination(os.environ.get('CONFIG_SET').split(','))
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {"success": True}, 'CreateConfigurationSet')
              except Exception as error:
                  logging.error('lambda_handler error: %s' % (error))
                  logging.error('lambda_handler trace: %s' % traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"success": False, "error": "See Lambda Logs"}, "error")
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"success": True}, 'Configuration set resources retained')

  
  ConfSetCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action: "iam:PassRole"
                Resource: !GetAtt SESFirehoseRole.Arn

  ConfSetCustomResourcePolicy:
      Type: AWS::IAM::Policy
      Properties:
        Roles:
          - !Ref ConfSetCustomResourceRole
        PolicyName: ConfSetCustomResourcePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: "Allow"
              Action:
                - ses:CreateConfigurationSetEventDestination
              Resource:
                - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:*"
            -
              Effect: "Allow"
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

#### CUSTOM RESOURCE LAMBDA - EXECUTE NAMED QUERY
##################################

  ExecuteNamedQuery:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt CustomResourceHelper.Arn
      CustomResourceAction: ExecuteNamedQuery

  CustomResourceHelper:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CustomResourceHelperRole.Arn
      Runtime: python3.12
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          S3_DATA_BUCKET: !Ref SESS3DataLake
          SES_EVENTS_TABLE: !Ref EventTableAllNamedQuery
          EMAIL_STATUS_VIEW: !Ref EmailStatusNamedQuery
      Code:
       ZipFile: |
        import cfnresponse
        import os
        import logging
        import traceback
        import boto3
        import json
        import time

        athena = boto3.client('athena')
        sesv2 = boto3.client('sesv2')

        def execute_named_queries(namedQueries):
            try:
                response = athena.batch_get_named_query(NamedQueryIds=namedQueries)
                for q in response['NamedQueries']:
                    start_query_response = athena.start_query_execution(
                        QueryString=q['QueryString'],
                        QueryExecutionContext={
                          'Database': q['Database']
                        },
                        ResultConfiguration={
                          'OutputLocation': 's3://%s/temp/' % (os.environ.get('S3_DATA_BUCKET'))
                        }
                    )
                    while True:
                        time.sleep(2)
                        get_query_response = athena.get_query_execution(
                            QueryExecutionId=start_query_response['QueryExecutionId']
                        )

                        if get_query_response['QueryExecution']['Status']['State'] == 'SUCCEEDED' or get_query_response['QueryExecution']['Status']['State'] == 'FAILED':
                            logging.debug('Query Result for: %s' % (q['Name']), get_query_response)
                            break
            except Exception as error:
                logging.error('execute_named_queries error: %s' % (error))
                logging.error('execute_named_queries trace: %s' % traceback.format_exc())
                raise

        def lambda_handler(event, context):
            log_level = str(os.environ.get('LOG_LEVEL')).upper()
            if log_level not in [
                              'DEBUG', 'INFO',
                              'WARNING', 'ERROR',
                              'CRITICAL'
                          ]:
              log_level = 'DEBUG'
            logging.getLogger().setLevel(log_level)
            logging.debug(event)

            try:
                if event['ResourceProperties']['CustomResourceAction'] == 'ExecuteNamedQuery':
                    execute_named_queries([os.environ.get('SES_EVENTS_TABLE')])
                    execute_named_queries([os.environ.get('EMAIL_STATUS_VIEW')])
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {"success": True}, 'ExecuteNamedQuery')
                else:
                    logging.error('Missing CustomResourceAction - no action to perform')
                    cfnresponse.send(event, context, cfnresponse.FAILED, {"success": False, "error": "Missing CustomResourceAction"}, "error")

            except Exception as error:
                logging.error('lambda_handler error: %s' % (error))
                logging.error('lambda_handler trace: %s' % traceback.format_exc())
                cfnresponse.send(event, context, cfnresponse.FAILED, {"success": False, "error": "See Lambda Logs"}, "error")
  
  CustomResourceHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  CustomResourceHelperPolicy:
      Type: AWS::IAM::Policy
      Properties:
        Roles:
          - !Ref CustomResourceHelperRole
        PolicyName: CustomResourceHelperPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:GetBucketLocation"
                - "s3:GetObject"
                - "s3:ListBucket"
                - "s3:ListBucketMultipartUploads"
                - "s3:ListMultipartUploadParts"
                - "s3:AbortMultipartUpload"
                - "s3:CreateBucket"
                - "s3:PutObject"
              Resource:
                - !Sub "arn:aws:s3:::${CreateBucketName}"
                - !Sub "arn:aws:s3:::${CreateBucketName}*"
            -
              Effect: "Allow"
              Action:
                - "athena:StartQueryExecution"
                - "athena:GetNamedQuery"
                - "athena:BatchGetNamedQuery"
                - "athena:GetQueryExecution"
              Resource: !Sub "arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*"
            -
              Effect: "Allow"
              Action:
                - "glue:GetDatabase"
                - "glue:GetDatabases"
                - "glue:GetTable"
                - "glue:GetTables"
                - "glue:GetPartition"
                - "glue:GetPartitions"
                - "glue:CreateTable"
              Resource:
                - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${EventAthenaDatabaseName}/*"
                - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${EventAthenaDatabaseName}"
                - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
            -
              Effect: "Allow"
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

#### ATHENA PARTITION LAMBDA
##################################

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AthenaPartitionLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${CreateBucketName}
      SourceAccount: !Ref "AWS::AccountId"

  AthenaPartitionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt AthenaPartitionLambdaRole.Arn
      Runtime: python3.12
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DATABASE_NAME: !Ref EventAthenaDatabaseName
      Code:
       ZipFile: |             
        import json
        import boto3
        import logging
        import traceback
        import datetime
        import json
        import os
        import urllib.request, urllib.error, urllib.parse

        client = boto3.client('athena')

        def lambda_handler(event, context):
            log_level = str(os.environ.get('LOG_LEVEL')).upper()
            if log_level not in [
                                'DEBUG', 'INFO',
                                'WARNING', 'ERROR',
                                'CRITICAL'
                            ]:
              log_level = 'DEBUG'
            logging.getLogger().setLevel(log_level)

            logging.debug(event)

            try:
                for record in event['Records']:
                    key = record['s3']['object']['key']
                    parts = key.split('/')

                    s3Bucket = 's3://' + record['s3']['bucket']['name']

                    query = "ALTER TABLE ses_events ADD IF NOT EXISTS PARTITION (ingest_timestamp='%s-%s-%s %s:00:00') LOCATION '%s/%s/%s/%s/%s'" % (parts[1], parts[2], parts[3], parts[4], s3Bucket + '/events', parts[1], parts[2], parts[3], parts[4])

                    logging.debug(query)

                    response = client.start_query_execution(
                      QueryString=query,
                      QueryExecutionContext={
                          'Database': os.environ.get('DATABASE_NAME')
                      },
                      ResultConfiguration={
                          'OutputLocation': s3Bucket + '/temp'
                      }
                    )
                    logging.debug(response)

            except Exception as error:
                logging.error('lambda_handler error: %s' % (error))
                logging.error('lambda_handler trace: %s' % traceback.format_exc())
                result = {
                    'statusCode': '500',
                    'body':  {'message': 'error'}
                }
                return json.dumps(result)
  
  AthenaPartitionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  AthenaPartitionLambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref AthenaPartitionLambdaRole
      PolicyName: "AthenaPartitionLambdaRolePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:ListMultipartUploadParts"
              - "s3:AbortMultipartUpload"
              - "s3:CreateBucket"
              - "s3:PutObject"
            Resource:
              - !Sub arn:aws:s3:::${CreateBucketName}
              - !Sub arn:aws:s3:::${CreateBucketName}/*
          -
            Effect: "Allow"
            Action:
              - "athena:StartQueryExecution"
            Resource: !Sub "arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*"
          -
            Effect: "Allow"
            Action:
              - "glue:GetDatabase"
              - "glue:GetDatabases"
              - "glue:GetTable"
              - "glue:GetTables"
              - "glue:GetPartition"
              - "glue:GetPartitions"
              - "glue:CreateTable"
              - "glue:CreatePartition"
              - "glue:BatchCreatePartition"
            Resource:
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${EventAthenaDatabaseName}/*"
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${EventAthenaDatabaseName}"
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          -
            Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  ##### S3 BUCKETS
  #######################################

  SESS3DataLake:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: Not public facing.
    Properties:
      BucketName: !Ref CreateBucketName
      OwnershipControls:
        Rules:
         - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: ses-event-processing/
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "events/"
            Function: !GetAtt AthenaPartitionLambda.Arn

  SESS3DataLakePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SESS3DataLake
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AllowSSLRequestsOnly
          Effect: Deny
          Principal: "*"
          Action: "s3:*"
          Resource:
            - !Sub "arn:aws:s3:::${CreateBucketName}/*"
            - !Sub "arn:aws:s3:::${CreateBucketName}"
          Condition:
            Bool:
              "aws:SecureTransport": "false"
  LogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: This is the log bucket.
    Properties:
      AccessControl: LogDeliveryWrite
      OwnershipControls:
        Rules:
         - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: "s3:GetBucketAcl"
          Resource: !Sub arn:aws:s3:::${LogBucket}
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: "s3:PutObject"
          Resource: !Sub arn:aws:s3:::${LogBucket}/AWSLogs/${AWS::AccountId}/*
          Condition:
            StringEquals:
              "s3:x-amz-acl": "bucket-owner-full-control"
        - Sid: LogBucketAllowSSLRequestsOnly
          Effect: Deny
          Principal: "*"
          Action: "s3:*"
          Resource:
            - !Sub "arn:aws:s3:::${LogBucket}/*"
            - !Sub "arn:aws:s3:::${LogBucket}"
          Condition:
            Bool:
              "aws:SecureTransport": "false"

  #### KINESIS FIREHOSE - SES
  #######################################

  SESEventFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn: ExecuteNamedQuery
    Properties:
      DeliveryStreamType: "DirectPut"
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub "arn:aws:s3:::${SESS3DataLake}"
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 128
        DataFormatConversionConfiguration:
          Enabled: true
          InputFormatConfiguration:
            Deserializer:
              OpenXJsonSerDe: {}
          OutputFormatConfiguration:
            Serializer:
              ParquetSerDe: {}
          SchemaConfiguration:
            DatabaseName: !Ref EventAthenaDatabaseName
            Region: !Ref AWS::Region
            RoleARN: !GetAtt SESKinesisFirehoseRole.Arn
            TableName: "ses_events"
            VersionId: "LATEST"
            CatalogId: !Ref AWS::AccountId
        CompressionFormat: "UNCOMPRESSED"
        Prefix: "events/"
        ErrorOutputPrefix: "errors/"
        RoleARN: !GetAtt SESKinesisFirehoseRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Sub "/aws/kinesisfirehose/${AWS::StackName}-ses-eventstream-firehose"
          LogStreamName: "S3DeliveryErrors"

  KinesisFirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/kinesisfirehose/${AWS::StackName}-ses-eventstream-firehose"

  KinesisFirehoseLogStreamName:
    Type: AWS::Logs::LogStream
    DependsOn: KinesisFirehoseLogGroup
    Properties:
      LogGroupName: !Sub "/aws/kinesisfirehose/${AWS::StackName}-ses-eventstream-firehose"
      LogStreamName: "S3DeliveryErrors"

  SESKinesisFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${CreateBucketName}/*"
                  - !Sub "arn:aws:s3:::${CreateBucketName}"
              -
                Effect: "Allow"
                Action:
                  - "glue:GetTable"
                  - "glue:GetTableVersion"
                  - "glue:GetTableVersions"
                Resource:
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${EventAthenaDatabaseName}/*"
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${EventAthenaDatabaseName}"
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
              -
                Effect: "Allow"
                Action: "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*:log-stream:*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

#### Firehose IAM role 
##################################

  SESFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ses.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "firehose:PutRecord"
                  - "firehose:PutRecordBatch"
                  - "firehose:DescribeDeliveryStream"
                Resource: !GetAtt SESEventFirehose.Arn

Outputs:
  SESFirehoseRole:
    Description: The IAM role ARN created for Amazon SES to assume and publish events to Amazon Kinesis Firehose.
    Value: !GetAtt SESFirehoseRole.Arn
  KinesisFirehose:
    Description: The Amazon Kinesis Firehose ARN.
    Value: !GetAtt SESEventFirehose.Arn